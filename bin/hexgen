#!/usr/bin/env python3
from __future__ import annotations

import argparse
# import sys

# Remove that shit, entry points are the answer
# sys.path.append('.')
from pathlib import Path

from hexgen import generate, draw_grid
from hexgen.enums import MapType

BASE_DIR = Path().absolute()
OUTPUT_PATH = BASE_DIR / 'output'


def validate_dir_path(dir_path: str | Path) -> Path:
    dir_path = Path(dir_path)
    if dir_path.is_dir(dir_path):
        return dir_path
    else:
        raise NotADirectoryError(str(dir_path))


parser = argparse.ArgumentParser()
parser.add_argument("--map-type")
parser.add_argument("--surface-pressure", type=float)
parser.add_argument("--axial-tilt", type=int)
parser.add_argument("--size", type=int)
parser.add_argument("--base-temp", type=float)
parser.add_argument("--avg-temp", type=int)
parser.add_argument("--sea-percent", type=int)
parser.add_argument("--hydrosphere", action="store_true")
parser.add_argument("--image", action="store_true")
parser.add_argument("--num-rivers", type=int)
parser.add_argument("--random-seed", type=int)
parser.add_argument("--num-territories", type=int)
parser.add_argument("--debug", action="store_true")
parser.add_argument("--output-dir", type=validate_dir_path, default=OUTPUT_PATH, help=f"Directory to output data and "
                                                                                      f"maps into, defaults to"
                                                                                      f" {OUTPUT_PATH}")
args = parser.parse_args()

options = {
    "map_type": MapType.terran,
    "surface_pressure": args.surface_pressure or 1013.25,
    "axial_tilt": args.axial_tilt or 23,
    "size": args.size or 100,
    "base_temp": args.base_temp or -19.50,
    "avg_temp": args.avg_temp or 12,
    "sea_percent": args.sea_percent or 60,
    "hydrosphere": args.hydrosphere or True,
    "num_rivers": args.num_rivers or 125,
    "num_territories": args.num_territories or 0,
    "random_seed": args.random_seed or None
}

WORLD_DATA_FILEPATH = args.output_dir / 'world-data.json'
print(WORLD_DATA_FILEPATH)

hex_grid = generate(options, debug=args.debug, image=args.image)
if args.image:
    draw_grid(hex_grid, OUTPUT_PATH)

hex_grid.export(WORLD_DATA_FILEPATH)
